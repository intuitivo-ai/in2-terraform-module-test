name: Terraform Plan

on:
  workflow_call:
    inputs:
      AWS_REGION:
        required: true
        type: string
      ENVIRONMENT:
        required: true
        type: string
      LAMBDA:
        required: false
        type: boolean
        default: false
      REQUIREMENTS:
        required: false
        type: boolean
        default: false
      TF_PATH:
        required: false
        type: string
        default: './'
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      INFRACOST_API_KEY:
        required: false
      PERSONAL_ACCESS_TOKEN:
        required: false
      GOOGLE_CREDENTIALS:
        required: false
      GH_ADMIN_TOKEN:
        required: false

env:
  GITHUB_ACTOR: ${{ github.actor }}
  GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  TF_VAR_branch: ${{ github.head_ref || github.ref_name }}
  TF_VAR_commit_id: ${{ github.event.pull_request.head.sha || github.sha }}
  TF_VAR_gh_admin_token: ${{ secrets.GH_ADMIN_TOKEN }}
  TF_VAR_gh_run_attempt: ${{ github.run_attempt }}
  TF_VAR_gh_run_number: ${{ github.run_number }}
  VAR_FILE: ${{ inputs.ENVIRONMENT }}-${{ inputs.AWS_REGION }}

jobs:
  iam_roles_policies:
    name: IAM role with policies
    uses: ./.github/workflows/iam-roles-policies.yml
    with:
      AWS_REGION: ${{ inputs.AWS_REGION }}
      ENVIRONMENT: ${{ inputs.ENVIRONMENT }}
      TF_PATH: ${{ inputs.TF_PATH }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  terraform-plan:
    if: ${{ needs.iam_roles_policies.outputs.check_config_files }}
    runs-on: [ self-hosted, linux, intuitivo ]
    env:
      GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      INFRACOST_API_KEY: ${{ secrets.INFRACOST_API_KEY }}
    concurrency:
      group: terraform-plan-${{ inputs.ENVIRONMENT }}-${{ inputs.AWS_REGION }}-${{ github.ref_name }}
    name: Plan
    needs:
      - iam_roles_policies
    defaults:
      run:
        working-directory: ${{ inputs.TF_PATH }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper : false
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ needs.iam_roles_policies.outputs.access_key_id }}
          aws-secret-access-key: ${{ needs.iam_roles_policies.outputs.secret_access_key }}
          aws-session-token: ${{ needs.iam_roles_policies.outputs.session_token }}
          aws-region: ${{ inputs.AWS_REGION }}
      - name: Show AWS user
        run: |
          aws sts get-caller-identity
      - name: Create lambda zip files
        if: ${{ inputs.LAMBDA }}
        run: |
          cd ..
          chmod -R +x ./scripts
          ./scripts/create_zip_files.sh
          cd -
      - name: Install workflow requirements
        if: ${{ inputs.REQUIREMENTS }}
        run: |
          cd ..
          chmod -R +x ./scripts
          ./scripts/requirements.sh
          cd -
      - name: Init
        run: |
          terraform init -reconfigure -backend-config=${{ inputs.ENVIRONMENT }}-${{ inputs.AWS_REGION }}.backend
      - name: Detect import template
        run: |
          original_filename="import-${{ inputs.ENVIRONMENT }}-${{ inputs.AWS_REGION }}.import"
          new_filename="import-${{ inputs.ENVIRONMENT }}-${{ inputs.AWS_REGION }}.tf"

          if [ -f "$original_filename" ]; then
            mv "$original_filename" "$new_filename"
            echo "Import file $new_filename created."
          else
            echo "No import file detected for ${{ inputs.ENVIRONMENT }} in region ${{ inputs.AWS_REGION }}."
          fi
      - name: Validate
        run: |
          terraform validate -json
      - name: Plan
        run: |
          terraform plan -var-file=$VAR_FILE.tfvars -input=false -lock=false -out=$VAR_FILE.plan
      - name: Show outputs
        run: |
          terraform output
      - name: Save plan as JSON
        id: tf-json-plan
        run: |
          terraform show -json $VAR_FILE.plan > $VAR_FILE.json
          echo "plan_file=$VAR_FILE.json" >> $GITHUB_OUTPUT
      - name: Upload terraform json plan
        uses: actions/upload-artifact@v4
        env:
          PLAN_FILE: ${{ steps.tf-json-plan.outputs.plan_file }}
        with:
          name: ${{ env.PLAN_FILE }}
          overwrite: true
          path: ${{ inputs.TF_PATH }}/${{ env.PLAN_FILE }}
          retention-days: 1